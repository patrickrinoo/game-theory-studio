"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import type { SimulationResult } from "@/app/page"
import { Download, FileText, ImageIcon, Table } from "lucide-react"

interface UIGameScenario {
  id: string
  name: string
  description: string
  playerCount: number
  strategies: string[]
  category: string
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced'
  payoffMatrix: number[][][]
  realWorldApplications: string[]
  educationalFocus: string[]
  learningObjectives: string[]
  nashEquilibria: any[]
  dominantStrategies: any[]
}

interface ExportResultsProps {
  results: SimulationResult
  game: UIGameScenario
}

export function ExportResults({ results, game }: ExportResultsProps) {
  const exportToCSV = () => {
    const csvData = [
      ["Metric", "Value"],
      ["Game", game.name],
      ["Iterations", results.iterations.toString()],
      ["Total Outcomes", Object.keys(results.outcomes).length.toString()],
      ...Object.entries(results.outcomes).map(([outcome, frequency]) => [`Outcome: ${outcome}`, frequency.toString()]),
      ...results.expectedPayoffs.map((payoff, index) => [`Player ${index + 1} Expected Payoff`, payoff.toString()]),
    ]

    const csvContent = csvData.map((row) => row.join(",")).join("\n")
    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${game.id}-simulation-results.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const exportToJSON = () => {
    const jsonData = {
      game: {
        id: game.id,
        name: game.name,
        description: game.description,
      },
      simulation: {
        iterations: results.iterations,
        timestamp: new Date().toISOString(),
      },
      results: {
        outcomes: results.outcomes,
        strategyFrequencies: results.strategyFrequencies,
        expectedPayoffs: results.expectedPayoffs,
        nashEquilibrium: results.nashEquilibrium,
        dominantStrategies: results.dominantStrategies,
      },
    }

    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: "application/json" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${game.id}-simulation-results.json`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const generateReport = () => {
    const report = `
# Monte Carlo Game Theory Simulation Report

## Game: ${game.name}
**Description:** ${game.description}
**Date:** ${new Date().toLocaleDateString()}

## Simulation Parameters
- **Iterations:** ${results.iterations.toLocaleString()}
- **Players:** ${game.playerCount}
- **Strategies:** ${game.strategies.join(", ")}

## Results Summary

### Outcome Distribution
${Object.entries(results.outcomes)
  .sort(([, a], [, b]) => b - a)
  .map(
    ([outcome, frequency]) =>
      `- **${outcome}:** ${frequency} times (${((frequency / results.iterations) * 100).toFixed(1)}%)`,
  )
  .join("\n")}

### Expected Payoffs
${results.expectedPayoffs.map((payoff, index) => `- **Player ${index + 1}:** ${payoff.toFixed(3)}`).join("\n")}

### Strategic Analysis
${
  results.nashEquilibrium
    ? `**Nash Equilibrium Found:**\n${results.nashEquilibrium.strategies
        .map(
          (strategyIndex, playerIndex) =>
            `- Player ${playerIndex + 1}: ${game.strategies[strategyIndex]} (Payoff: ${results.nashEquilibrium!.payoffs[playerIndex].toFixed(2)})`,
        )
        .join("\n")}`
    : "**Nash Equilibrium:** No pure strategy equilibrium found."
}

${
  results.dominantStrategies && results.dominantStrategies.length > 0
    ? `**Dominant Strategies:** ${results.dominantStrategies.join(", ")}`
    : "**Dominant Strategies:** None identified."
}

## Conclusions
This simulation provides insights into strategic decision-making in the ${game.name} scenario. 
The results can help understand optimal play and equilibrium concepts in game theory.

---
*Generated by Game Theory Studio*
    `.trim()

    const blob = new Blob([report], { type: "text/markdown" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${game.id}-simulation-report.md`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const copyToClipboard = async () => {
    const summary = `
Game: ${game.name}
Iterations: ${results.iterations.toLocaleString()}
Most Common Outcome: ${Object.entries(results.outcomes).sort(([, a], [, b]) => b - a)[0]?.[0] || "N/A"}
Average Payoffs: ${results.expectedPayoffs.map((p) => p.toFixed(2)).join(", ")}
Nash Equilibrium: ${results.nashEquilibrium ? "Found" : "Not found"}
    `.trim()

    try {
      await navigator.clipboard.writeText(summary)
      // You could add a toast notification here
    } catch (err) {
      console.error("Failed to copy to clipboard:", err)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="w-5 h-5" />
          Export Results
        </CardTitle>
        <CardDescription>Download simulation results in various formats</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <Button onClick={exportToCSV} variant="outline" className="flex items-center gap-2">
            <Table className="w-4 h-4" />
            Export CSV
          </Button>

          <Button onClick={exportToJSON} variant="outline" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Export JSON
          </Button>

          <Button onClick={generateReport} variant="outline" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Generate Report
          </Button>

          <Button onClick={copyToClipboard} variant="outline" className="flex items-center gap-2">
            <ImageIcon className="w-4 h-4" />
            Copy Summary
          </Button>
        </div>

        <div className="pt-4 border-t">
          <h4 className="font-semibold mb-2">Export Formats</h4>
          <div className="text-sm text-gray-600 space-y-1">
            <div>
              <strong>CSV:</strong> Spreadsheet-compatible data for further analysis
            </div>
            <div>
              <strong>JSON:</strong> Structured data for programmatic use
            </div>
            <div>
              <strong>Report:</strong> Human-readable markdown summary
            </div>
            <div>
              <strong>Summary:</strong> Quick copy-paste overview
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
