{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Foundation Setup",
        "description": "Set up the basic Next.js project structure with TypeScript, Tailwind CSS, and essential dependencies",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Initialize the project foundation with proper folder structure, configure TypeScript, Tailwind CSS, and install required dependencies like D3.js, Chart.js, and other visualization libraries. Set up component architecture and routing.",
        "testStrategy": "Verify that the development server starts without errors, TypeScript compilation works, and basic routing is functional."
      },
      {
        "id": 2,
        "title": "Game Theory Data Models",
        "description": "Create TypeScript interfaces and classes for game theory concepts",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Define interfaces for Player, Strategy, PayoffMatrix, GameScenario, and SimulationResult. Create enums for game types (Prisoner's Dilemma, Battle of Sexes, etc.) and strategy types (deterministic, mixed). Implement utility functions for game theory calculations.",
        "testStrategy": "Create unit tests for data models and verify type safety across the application."
      },
      {
        "id": 3,
        "title": "Game Scenario Configuration UI",
        "description": "Build the interface for users to select and configure game theory scenarios",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Create components for game selection (Prisoner's Dilemma, Battle of Sexes, Chicken Game, Stag Hunt, Public Goods Game, Hawk-Dove Game). Implement payoff matrix editor with drag-and-drop or form inputs. Add validation for payoff values and game constraints.",
        "testStrategy": "Test game selection workflow, payoff matrix editing, and validation logic with various input scenarios.",
        "subtasks": [
          {
            "id": 1,
            "title": "Game Type Selection Interface",
            "description": "Build the interface for selecting classic game theory scenarios",
            "details": "Create an intuitive game selection interface featuring classic games like Prisoner's Dilemma, Battle of Sexes, Chicken Game, Stag Hunt, Public Goods Game, and Hawk-Dove Game. Include game descriptions, difficulty levels, real-world examples, and visual previews. Implement search, filtering, and categorization features.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Dynamic Payoff Matrix Editor",
            "description": "Create an interactive payoff matrix editor with validation and visualization",
            "details": "Build a dynamic payoff matrix editor that allows users to customize game payoffs. Implement input validation, real-time preview of strategic implications, and visual feedback for dominant strategies. Support 2x2, 3x3, and NxN matrices with drag-and-drop reordering and preset value templates.",
            "status": "done",
            "dependencies": [
              "3.1"
            ],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Player Configuration System",
            "description": "Implement player setup and strategy assignment interface",
            "details": "Create interfaces for configuring the number of players (2-5), assigning player names, and setting initial strategies. Implement strategy type selection (pure, mixed, adaptive) with probability sliders for mixed strategies. Add player behavior presets (rational, random, aggressive, cooperative) and custom strategy configuration.",
            "status": "done",
            "dependencies": [
              "3.1"
            ],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Game Validation & Preview System",
            "description": "Build validation logic and preview features for configured games",
            "details": "Implement comprehensive validation for game configurations including payoff matrix validity, strategy consistency, and player setup verification. Create preview components showing expected Nash equilibria, dominant strategies, and game balance analysis. Add warnings for degenerate cases and suggestions for improvement.",
            "status": "done",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Simulation Parameters Configuration",
            "description": "Create interface for Monte Carlo simulation parameter settings",
            "details": "Build configuration interface for simulation parameters including iteration count (1K-1M+), random seed settings, convergence criteria, and performance options. Implement preset configurations for different use cases (quick test, thorough analysis, research-grade). Add estimated runtime calculations and memory usage predictions.",
            "status": "done",
            "dependencies": [
              "3.4"
            ],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Save & Load Game Configurations",
            "description": "Implement game scenario persistence and sharing functionality",
            "details": "Create functionality to save, load, and share game configurations. Implement local storage for user scenarios, export/import via JSON files, and URL sharing for quick scenario distribution. Add a personal scenario library with tagging, search, and version history. Include templates for educational use cases.",
            "status": "done",
            "dependencies": [
              "3.5"
            ],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Monte Carlo Simulation Engine",
        "description": "Implement the core Monte Carlo simulation algorithm",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "Create the Monte Carlo simulation engine that can run thousands of iterations for any game scenario. Implement random strategy assignment, outcome calculation, and probability analysis. Optimize for performance to handle large iteration counts (10,000+) within the 5-30 second requirement.",
        "testStrategy": "Benchmark simulation performance with various game sizes and iteration counts. Verify statistical accuracy against known game theory results.",
        "subtasks": [
          {
            "id": 1,
            "title": "Enhanced Random Number Generation",
            "description": "Implement advanced pseudo-random number generators for Monte Carlo simulations",
            "details": "Replace basic Math.random() with advanced PRNG algorithms (Mersenne Twister, Linear Congruential Generator) for better statistical properties. Implement seed management for reproducible simulations. Add support for multiple RNG strategies and validation of randomness quality.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Advanced Strategy Simulation",
            "description": "Implement sophisticated strategy selection and mixed strategy calculations",
            "details": "Enhance the existing strategy selection logic to support complex mixed strategies, evolutionary strategies, and adaptive player behavior. Implement probability distribution sampling for mixed strategies using cumulative distribution functions. Add support for strategy learning and adaptation over iterations.",
            "status": "done",
            "dependencies": [
              "4.1"
            ],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Performance Optimization Engine",
            "description": "Implement performance optimizations for high-iteration simulations",
            "details": "Add Web Workers for parallel processing, implement batch processing for large simulations, add memory management for million+ iteration runs. Create progress tracking with non-blocking UI updates. Implement simulation interruption and resumption capabilities.",
            "status": "done",
            "dependencies": [
              "4.2"
            ],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Convergence Analysis System",
            "description": "Implement statistical convergence detection and analysis",
            "details": "Build algorithms to detect when simulations have converged to stable results. Implement statistical tests for convergence (confidence intervals, variance analysis). Add early stopping when convergence is detected to save computation time. Create convergence visualization data for real-time analysis.",
            "status": "done",
            "dependencies": [
              "4.2"
            ],
            "parentTaskId": 4
          },
          {
            "id": 5,
            "title": "Advanced Results Aggregation",
            "description": "Implement comprehensive statistical result collection and analysis",
            "details": "Create advanced data structures for collecting simulation results including payoff distributions, strategy evolution tracking, and statistical measures (mean, variance, confidence intervals). Implement real-time statistical calculations and historical data comparison capabilities.",
            "status": "done",
            "dependencies": [
              "4.4"
            ],
            "parentTaskId": 4
          },
          {
            "id": 6,
            "title": "Game Theory Algorithm Integration",
            "description": "Integrate Monte Carlo with advanced game theory calculations",
            "details": "Enhance the engine to work seamlessly with Nash equilibrium calculations, evolutionary stable strategies, and mixed strategy Nash equilibria. Implement Monte Carlo methods for finding approximate equilibria in complex games. Add support for coalition formation and multi-player game analysis.",
            "status": "done",
            "dependencies": [
              "4.5"
            ],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Nash Equilibrium Calculator",
        "description": "Implement algorithm to find Nash equilibria for games",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Create algorithms to calculate Nash equilibria for 2-player and multi-player games. Implement both pure and mixed strategy Nash equilibrium finding. Handle cases where no equilibrium exists or multiple equilibria exist.",
        "testStrategy": "Test against known game theory examples with verified Nash equilibria. Validate calculation accuracy for various game types.",
        "subtasks": [
          {
            "id": 1,
            "title": "Pure Strategy Nash Equilibrium Detection",
            "description": "Implement algorithm to find pure strategy Nash equilibria in 2-player games",
            "details": "Create functions to detect pure strategy Nash equilibria by checking best response conditions. A pure strategy Nash equilibrium exists when each player's strategy is a best response to the other player's strategy.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "Mixed Strategy Nash Equilibrium Calculator",
            "description": "Implement algorithm to calculate mixed strategy Nash equilibria for 2-player games",
            "details": "Create functions to calculate mixed strategy Nash equilibria using linear programming or iterative methods. Handle cases where players randomize between multiple strategies to achieve equilibrium.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 3,
            "title": "Multi-Player Nash Equilibrium Support",
            "description": "Extend Nash equilibrium calculations to support games with more than 2 players",
            "details": "Implement algorithms to find Nash equilibria in n-player games. Handle the increased complexity of multi-player scenarios where each player must consider the strategies of all other players.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 4,
            "title": "Equilibrium Validation and Analysis",
            "description": "Implement validation functions to verify calculated equilibria and analyze their stability",
            "details": "Create functions to validate that calculated equilibria are indeed Nash equilibria by checking deviation conditions. Analyze equilibrium stability and provide insights about the strength of the equilibrium.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 5,
            "title": "Nash Equilibrium Integration with Existing Components",
            "description": "Integrate Nash equilibrium calculations with game configuration UI and visualization components",
            "details": "Connect the Nash equilibrium calculator with the existing game setup, payoff matrix, and visualization components. Ensure calculated equilibria are displayed in the Nash equilibrium chart and can be used by the Monte Carlo simulation.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Strategy Analysis Module",
        "description": "Build components for analyzing and displaying optimal strategies",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "details": "Create UI components to display Nash equilibria, mixed strategies, and strategic dominance. Implement visualizations for strategy comparisons and allow users to experiment with different strategy combinations. Show strategic dominance analysis and best response calculations.",
        "testStrategy": "Verify strategy analysis accuracy and test interactive strategy modification features.",
        "subtasks": [
          {
            "id": 1,
            "title": "Strategic Dominance Analysis Component",
            "description": "Create a component to analyze and display dominant strategies, strictly dominated strategies, and iterative elimination of dominated strategies",
            "details": "Build a component that can identify weakly and strictly dominant strategies, perform iterative elimination of dominated strategies, and display the results visually with clear explanations for educational purposes",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Best Response Analysis Visualization",
            "description": "Create interactive visualizations showing best response functions and how they lead to Nash equilibria",
            "details": "Build components that can calculate and display best response functions for each player, show intersections that represent Nash equilibria, and provide interactive sliders to see how payoff changes affect best responses",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Strategy Comparison and Experiment Interface",
            "description": "Build an interactive interface for users to experiment with different strategy combinations and see their outcomes",
            "details": "Create a component that allows users to select different pure and mixed strategies for each player, run simulations to compare outcomes, and display expected payoffs, win rates, and strategy effectiveness metrics",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Mixed Strategy Calculator and Visualizer",
            "description": "Create components to help users understand and calculate mixed strategies with interactive probability adjustments",
            "details": "Build a mixed strategy calculator that shows probability distributions, expected payoffs for each strategy combination, and provides sliders for users to adjust mixing probabilities while seeing real-time updates to expected outcomes",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 5,
            "title": "Strategic Analysis Integration and Dashboard",
            "description": "Integrate all strategy analysis components into a cohesive dashboard and connect with existing game simulation components",
            "details": "Create a unified strategy analysis dashboard that brings together dominance analysis, best response visualization, strategy experiments, and mixed strategy tools. Integrate with the existing game setup and simulation system to provide comprehensive strategic insights",
            "status": "done",
            "dependencies": [
              "6.1",
              "6.2",
              "6.3",
              "6.4"
            ],
            "parentTaskId": 6
          }
        ]
      },
      {
        "id": 7,
        "title": "Real-Time Visualization System",
        "description": "Implement dynamic charts and graphs using D3.js or Chart.js",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Create interactive visualizations showing strategy evolution, payoff distributions, and simulation results. Implement bar graphs, line charts, scatter plots, and probability distribution charts. Add real-time updates during simulation runs and interactive features for exploring results.",
        "testStrategy": "Test visualization performance with large datasets, verify chart accuracy, and test interactive features across different browsers.",
        "subtasks": [
          {
            "id": 1,
            "title": "D3.js Integration Foundation",
            "description": "Set up D3.js integration with React and TypeScript for game theory visualizations",
            "details": "Create React components that properly integrate D3.js with Next.js. Implement custom hooks for D3 lifecycle management, SVG container setup, and responsive design. Set up TypeScript interfaces for D3 data structures and chart configurations. Create reusable D3 wrapper components for game theory specific visualizations.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 2,
            "title": "Strategy Evolution Charts",
            "description": "Build dynamic charts showing strategy evolution over simulation iterations",
            "details": "Create line charts and area charts that show how player strategies evolve during Monte Carlo simulations. Implement real-time data streaming, smooth animations, and interactive tooltips. Add zoom, pan, and selection capabilities. Support multiple players and strategy types with different colors and styles.",
            "status": "done",
            "dependencies": [
              "7.1"
            ],
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "Payoff Distribution Visualizations",
            "description": "Create interactive histograms and probability distributions for payoff analysis",
            "details": "Build histogram and density plot components for visualizing payoff distributions from Monte Carlo results. Implement statistical overlays (mean, median, confidence intervals). Add interactive features for filtering by player, strategy, or iteration range. Create probability density estimation and overlay theoretical distributions.",
            "status": "done",
            "dependencies": [
              "7.1"
            ],
            "parentTaskId": 7
          },
          {
            "id": 4,
            "title": "Nash Equilibrium Visualization",
            "description": "Create visual representations of Nash equilibria and strategic landscapes",
            "details": "Build specialized visualizations for Nash equilibria including strategy space plots, best response functions, and equilibrium convergence paths. Implement 2D and 3D visualization of mixed strategy equilibria. Add interactive exploration of strategy spaces and visualization of dominant strategy regions.",
            "status": "done",
            "dependencies": [
              "7.2",
              "7.3"
            ],
            "parentTaskId": 7
          },
          {
            "id": 5,
            "title": "Real-Time Performance Dashboard",
            "description": "Build performance monitoring and real-time simulation progress visualization",
            "details": "Create real-time dashboards showing simulation progress, convergence metrics, and performance statistics. Implement animated progress bars, live updating charts, and performance graphs (iterations/second, memory usage). Add simulation health monitoring and bottleneck detection visualizations.",
            "status": "done",
            "dependencies": [
              "7.2"
            ],
            "parentTaskId": 7
          },
          {
            "id": 6,
            "title": "Interactive Export & Animation System",
            "description": "Implement chart export capabilities and animation controls for visualizations",
            "details": "Build export functionality for charts (PNG, SVG, PDF) and animation recording capabilities. Implement playback controls for strategy evolution animations, speed controls, and frame-by-frame navigation. Add screenshot capture of entire visualization dashboards and animated GIF generation for presentations.",
            "status": "done",
            "dependencies": [
              "7.4",
              "7.5"
            ],
            "parentTaskId": 7
          }
        ]
      },
      {
        "id": 8,
        "title": "Simulation Controls Interface",
        "description": "Build the UI for configuring and running simulations",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          3,
          4
        ],
        "details": "Create controls for setting iteration count, player strategies, and simulation parameters. Implement start/stop/pause functionality with progress indicators. Add real-time feedback during simulation execution and result preview capabilities.",
        "testStrategy": "Test simulation control workflow, progress tracking, and user interaction during long-running simulations.",
        "subtasks": [
          {
            "id": 1,
            "title": "Simulation Control Panel Component",
            "description": "Create the main simulation control panel component with start/stop/pause buttons and progress indicators",
            "details": "Build a comprehensive control panel that integrates with the existing simulation-parameters.tsx component and monte-carlo-engine.ts. Include buttons for start, stop, pause/resume simulation, progress bars, current iteration display, and simulation status indicators.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "Real-time Progress Monitoring",
            "description": "Implement real-time progress tracking and performance metrics display during simulation execution",
            "details": "Create components that show real-time simulation progress, including iteration count, elapsed time, estimated time remaining, convergence indicators, and performance metrics. Integrate with the existing performance dashboard components.",
            "status": "done",
            "dependencies": [
              "8.1"
            ],
            "parentTaskId": 8
          },
          {
            "id": 3,
            "title": "Simulation State Management",
            "description": "Implement state management for simulation execution, pause/resume functionality, and results caching",
            "details": "Create a robust state management system that handles simulation lifecycle (idle, running, paused, completed, error states), manages simulation data persistence, handles pause/resume functionality, and provides clean simulation reset capabilities.",
            "status": "done",
            "dependencies": [
              "8.1"
            ],
            "parentTaskId": 8
          },
          {
            "id": 4,
            "title": "Batch Simulation Management",
            "description": "Implement functionality to run multiple simulations with different parameters and compare results",
            "details": "Create interface for setting up batch simulations with parameter variations, queue management for multiple simulation runs, comparison views for batch results, and export capabilities for batch analysis. Integrate with existing configuration management.",
            "status": "done",
            "dependencies": [
              "8.2",
              "8.3"
            ],
            "parentTaskId": 8
          },
          {
            "id": 5,
            "title": "Results Preview and Feedback",
            "description": "Create real-time results preview and user feedback components during simulation execution",
            "details": "Build components that show preliminary results as simulation progresses, convergence indicators, live charts integration, user feedback systems for simulation quality, and quick action buttons for simulation adjustments. Connect with existing visualization dashboard.",
            "status": "done",
            "dependencies": [
              "8.2"
            ],
            "parentTaskId": 8
          },
          {
            "id": 6,
            "title": "Integration with Existing Components",
            "description": "Integrate simulation controls with existing game configuration, visualization, and analysis components",
            "details": "Ensure seamless integration between simulation controls and existing components: game-selector.tsx, payoff-matrix.tsx, simulation-parameters.tsx, visualization-dashboard.tsx, and strategic-analysis-dashboard.tsx. Create consistent data flow and user experience across the entire application.",
            "status": "done",
            "dependencies": [
              "8.4",
              "8.5"
            ],
            "parentTaskId": 8
          }
        ]
      },
      {
        "id": 9,
        "title": "Player Configuration System",
        "description": "Implement customizable player settings and strategy assignment",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "details": "Create interface for defining 2-5 players with custom strategies. Allow selection between deterministic strategies (always cooperate/defect) and randomized mixed strategies. Implement strategy probability sliders and preset strategy templates.",
        "testStrategy": "Test player configuration with various combinations of strategies and verify correct simulation behavior."
      },
      {
        "id": 10,
        "title": "Results Analysis Dashboard",
        "description": "Build comprehensive results display and analysis interface",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "details": "Create dashboard showing simulation results including most frequent strategies, expected payoffs, outcome probabilities, and strategy convergence analysis. Implement result comparison tools and statistical summaries. Add explanation of key takeaways and optimal strategies.",
        "testStrategy": "Verify result accuracy against simulation data and test dashboard responsiveness with various result set sizes."
      },
      {
        "id": 11,
        "title": "Export and Save Functionality",
        "description": "Implement features to save and export simulation results",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          10
        ],
        "details": "Add functionality to export results as CSV/Excel files and visualizations as PNG/JPEG/SVG. Implement save/load for game scenarios and simulation configurations. Create shareable result URLs and export reports.",
        "testStrategy": "Test export functionality across different file formats and verify data integrity in exported files."
      },
      {
        "id": 12,
        "title": "Scenario Library System",
        "description": "Build system for saving and loading custom game scenarios",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          3
        ],
        "details": "Create library interface for saving custom payoff matrices and player configurations. Implement scenario sharing, categorization, and search functionality. Add preset scenario templates for common game theory examples.",
        "testStrategy": "Test scenario save/load functionality and verify data persistence across browser sessions."
      },
      {
        "id": 13,
        "title": "Performance Optimization",
        "description": "Optimize simulation performance and memory usage",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          4,
          7
        ],
        "details": "Implement Web Workers for Monte Carlo simulations to prevent UI blocking. Optimize memory usage for large iteration counts. Add progressive rendering for visualizations and implement efficient data structures for simulation results.",
        "testStrategy": "Benchmark performance improvements and test with maximum supported game sizes and iteration counts."
      },
      {
        "id": 14,
        "title": "UI/UX Design Implementation",
        "description": "Implement responsive design and user experience enhancements",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "Create responsive design optimized for desktop use. Implement consistent design system with Tailwind CSS. Add loading states, error handling, and user feedback mechanisms. Ensure intuitive navigation and clear information hierarchy.",
        "testStrategy": "Test responsiveness across different screen sizes, verify accessibility compliance, and conduct usability testing."
      },
      {
        "id": 15,
        "title": "Educational Content Integration",
        "description": "Add educational explanations and help content",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          14
        ],
        "details": "Create tooltips, help sections, and educational content explaining game theory concepts. Add guided tutorials for first-time users. Implement contextual help and examples for each game type and strategy concept.",
        "testStrategy": "Review educational content accuracy and test tutorial flow with users unfamiliar with game theory."
      },
      {
        "id": 16,
        "title": "Testing and Quality Assurance",
        "description": "Implement comprehensive testing suite and quality assurance",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          13
        ],
        "details": "Create unit tests for simulation algorithms, integration tests for user workflows, and end-to-end tests for complete simulation scenarios. Implement performance testing and cross-browser compatibility testing. Add error monitoring and logging.",
        "testStrategy": "Achieve >90% code coverage and verify all acceptance criteria from the PRD are met."
      },
      {
        "id": 17,
        "title": "Deployment and Production Setup",
        "description": "Deploy the application to production hosting",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "details": "Set up deployment pipeline to Vercel, Netlify, or GitHub Pages. Configure HTTPS, performance monitoring, and analytics. Implement production build optimization and CDN setup for assets. Add error tracking and user analytics.",
        "testStrategy": "Verify production deployment works correctly, test performance under load, and confirm all features work in production environment."
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "createdAt": "2025-01-24T00:00:00Z",
      "lastUpdated": "2025-01-24T00:00:00Z",
      "totalTasks": 17,
      "completedTasks": 0,
      "projectName": "Monte Carlo Game Theory Simulation",
      "description": "A web-based application for Monte Carlo simulations in game theory scenarios",
      "created": "2025-06-20T05:39:04.846Z",
      "updated": "2025-06-23T09:12:07.961Z"
    }
  }
}